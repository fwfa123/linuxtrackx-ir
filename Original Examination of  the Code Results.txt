Perfect! Now I have a comprehensive understanding of the LinuxTrack project. Let me provide you with a detailed review and analysis.
LinuxTrack Project Review
LinuxTrack is a head tracking system for Linux and Mac that provides support for various head tracking hardware, including:
TrackIR devices
Webcams (for face tracking)
Nintendo Wiimotes
Various other hardware devices
Project Status
Based on my analysis:
Last significant activity: ~2-6 years ago (only 6 commits in the last 2 years, 17 in the last 5 years)
Current version: 0.99.20
License: MIT License
Language: Primarily C/C++ with some Python prototypes
Project Architecture
The project has a modular architecture:
Core Library (src/linuxtrack.h): Provides a clean C API for applications
Hardware Drivers: Support for different input devices
webcam_driver.c - Webcam/face tracking
tir4_driver.c, tir_hw.c - TrackIR hardware support
wiimote_driver.c - Nintendo Wiimote support
Wine Bridge (src/wine_bridge/): Allows Windows games to use LinuxTrack
GUI (src/qt_gui/): Qt-based configuration interface
Game Plugins: X-Plane plugin and others
Current Build Issues on Modern Linux
From my testing, here are the main compatibility problems:
1. Autotools Version Mismatch
Apply
The project was built with an older autotools version
Modern systems may have different autotools versions
2. Dependency Requirements
The project requires numerous dependencies:
libmxml (for configuration parsing)
libusb-1.0 (for TrackIR hardware)
libcwiid (for Wiimote support)
liblo (for OSC support)
OpenCV (for face tracking)
Qt4/Qt5 (for GUI)
Wine development libraries (for Windows game support)
3. Architecture-Specific Issues
Complex 32/64-bit library handling
Wine integration challenges
Hardware access permissions (udev rules)
Proposed Modernization Strategy
I recommend we work together on these improvements:
Phase 1: Build System Modernization
Update Autotools: Regenerate configure scripts with modern autotools
CMake Migration: Consider migrating from autotools to CMake for better maintainability
Dependency Management: Create clear dependency installation scripts for modern distros
Phase 2: Code Modernization
C++ Standards: Update to modern C++ standards
Qt5/Qt6 Migration: Update GUI from Qt4 to Qt5/Qt6
OpenCV Updates: Fix compatibility with newer OpenCV versions
USB/Hardware Access: Update for modern udev and permission handling
Phase 3: Distribution & Packaging
AppImage/Flatpak: Create modern packaging
Systemd Integration: Proper service management
Modern Distro Support: Test on current Ubuntu, Fedora, Arch, etc.
Immediate Next Steps
Would you like to start by:
Creating a development environment with proper dependencies?
Fixing the immediate build issues (autotools regeneration)?
Setting up a modern build system (CMake conversion)?
Testing on your specific hardware to identify runtime issues?
I notice you have some existing work in your git repos (linuxtrack_appimage_backup suggests you've been working on modernizing this). Should we build upon your existing work or start fresh?
What specific issues have you encountered when trying to run LinuxTrack on modern Linux systems? This will help me prioritize which problems to tackle first.
